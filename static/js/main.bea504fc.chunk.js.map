{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/About.js","routes/Detail.js","components/Navigation.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","to","pathname","state","src","alt","map","genre","index","key","slice","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","About","props","console","log","Detail","location","history","undefined","push","Navigation","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6ZA+CeA,MA1Cf,YAA8D,IAA7CC,EAA4C,EAA5CA,GAAIC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OACjD,OACE,yBAAKC,UAAU,SACb,kBAAC,IAAD,CACEC,GAAI,CACFC,SAAS,UAAD,OAAYR,GACpBS,MAAO,CACLR,OACAC,QACAC,UACAC,SACAC,YAIJ,yBAAKK,IAAKN,EAAQO,IAAKT,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,eACb,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,iBACXD,EAAOO,KAAI,SAACC,EAAOC,GAAR,OACV,wBAAIC,IAAKD,EAAOR,UAAU,iBACvBO,OAIP,uBAAGP,UAAU,kBAAkBH,EAAQa,MAAM,EAAG,KAAhD,WCoBKC,G,kNA7CbR,MAAQ,CACNS,WAAW,EACXC,OAAQ,I,EAEVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IACd,4DANQ,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAKZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IARzB,2C,kEAWVQ,KAAKN,c,+BAEG,IAAD,EACuBM,KAAKjB,MAA3BS,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,6BAASb,UAAU,aAChBY,EACC,yBAAKZ,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAGF,yBAAKA,UAAU,UACZa,EAAOP,KAAI,SAACe,GAAD,OACV,kBAAC,EAAD,CACEZ,IAAKY,EAAM3B,GACXA,GAAI2B,EAAM3B,GACVC,KAAM0B,EAAM1B,KACZC,MAAOyB,EAAMzB,MACbC,QAASwB,EAAMxB,QACfC,OAAQuB,EAAMC,mBACdvB,OAAQsB,EAAMtB,kB,GApCXwB,IAAMC,Y,MCQVC,MAVf,SAAeC,GAEb,OADAC,QAAQC,IAAIF,GAEV,yBAAK1B,UAAU,oBACb,mJACA,oECwBS6B,G,wLA5BQ,IAAD,EACYT,KAAKM,MAA3BI,EADU,EACVA,SAAUC,EADA,EACAA,aACKC,IAAnBF,EAAS3B,OACX4B,EAAQE,KAAK,O,+BAGP,IACAH,EAAaV,KAAKM,MAAlBI,SAGR,OAAIA,EAAS3B,MAET,yBAAKH,UAAU,qBACb,yBACEI,IAAK0B,EAAS3B,MAAML,OACpBO,IAAI,SACJT,MAAOkC,EAAS3B,MAAMP,QAExB,6BAAMkC,EAAS3B,MAAMP,OACrB,8BAAOkC,EAAS3B,MAAMR,MACtB,8BAAOmC,EAAS3B,MAAMN,UAInB,S,GAzBQ0B,IAAMC,Y,MCWZU,MATf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,W,MCcSkC,MAZf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MAEA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAW3B,IACxC,kBAAC,IAAD,CAAOyB,KAAK,SAASE,UAAWb,IAChC,kBAAC,IAAD,CAAOW,KAAK,aAAaE,UAAWT,MCT1CU,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.bea504fc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({ id, year, title, summary, poster, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      <Link\r\n        to={{\r\n          pathname: `/movie/${id}`,\r\n          state: {\r\n            year,\r\n            title,\r\n            summary,\r\n            poster,\r\n            genres,\r\n          },\r\n        }}\r\n      >\r\n        <img src={poster} alt={title} title={title} />\r\n        <div className=\"movie__data\">\r\n          <h3 className=\"movie__title\">{title}</h3>\r\n          <h5 className=\"movie__year\">{year}</h5>\r\n          <ul className=\"movie__genres\">\r\n            {genres.map((genre, index) => (\r\n              <li key={index} className=\"genres__genre\">\r\n                {genre}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Movie from \"../components/Movie\";\r\nimport \"./Home.css\";\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    isLoading: true,\r\n    movies: [],\r\n  };\r\n  getMovies = async () => {\r\n    const {\r\n      data: {\r\n        data: { movies },\r\n      },\r\n    } = await axios.get(\r\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\r\n    );\r\n    this.setState({ movies, isLoading: false });\r\n  };\r\n  componentDidMount() {\r\n    this.getMovies();\r\n  }\r\n  render() {\r\n    const { isLoading, movies } = this.state;\r\n    return (\r\n      <section className=\"container\">\r\n        {isLoading ? (\r\n          <div className=\"loader\">\r\n            <span className=\"loader__text\">Loading...</span>\r\n          </div>\r\n        ) : (\r\n          <div className=\"movies\">\r\n            {movies.map((movie) => (\r\n              <Movie\r\n                key={movie.id}\r\n                id={movie.id}\r\n                year={movie.year}\r\n                title={movie.title}\r\n                summary={movie.summary}\r\n                poster={movie.medium_cover_image}\r\n                genres={movie.genres}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"./About.css\";\r\n\r\nfunction About(props) {\r\n  console.log(props);\r\n  return (\r\n    <div className=\"about__container\">\r\n      <span>“역대 평점 높은 영화를 보여주는 페이지”</span>\r\n      <span>− 현재 기준</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport \"./Detail.css\";\r\n\r\nclass Detail extends React.Component {\r\n  componentDidMount() {\r\n    const { location, history } = this.props;\r\n    if (location.state === undefined) {\r\n      history.push(\"/\");\r\n    }\r\n  }\r\n  render() {\r\n    const { location } = this.props;\r\n    // console.log(location);\r\n    // 그냥 url로 접근시 location.state는 undefined이다.\r\n    if (location.state) {\r\n      return (\r\n        <div className=\"detail__container\">\r\n          <img\r\n            src={location.state.poster}\r\n            alt=\"poster\"\r\n            title={location.state.title}\r\n          />\r\n          <div>{location.state.title}</div>\r\n          <span>{location.state.year}</span>\r\n          <span>{location.state.summary}</span>\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\nexport default Detail;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Navigation.css\";\r\n\r\n// 여기서 link는 html에 a태그와 같음. 차이점은 a태그는 링크로 들어갈때마다 새로고침해서 리액트 특성을 죽인다. 하지만 react-router-dom의 Link는 새로고침을 하지않고 동적으로 페이지가 바뀌기 때문에 리액트의 장점을 그대로 이용할수 있다. 주의할점은 Router 안에 있어야 동작 한다는것이다. 여기서는 HashRouter 안에 Navigation 컴포넌트를 넣었기 때문에 동작하는것이다.\r\nfunction Navigation() {\r\n  return (\r\n    <div className=\"nav\">\r\n      <Link to=\"/\">Home</Link>\r\n      <Link to=\"/about\">About</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Home from \"./routes/Home\";\nimport About from \"./routes/About\";\nimport Detail from \"./routes/Detail\";\nimport Navigation from \"./components/Navigation\";\nimport \"./App.css\";\n\n// 리액에트에서 라우트 되는 원리는 exact 속성이 없다면 http://localhost:3000/#/about 입력시 두개의 컴포넌트를 순차적으로 불러온다. 왜냐하면 저 url에 두개의 path가 다 포함되어있어서\n// 그래서 exact를 써서 정확히 그 path 일때만 동작하게 하면 해결 할 수 있다.\n// url에 # 을 없앨수 있는 방법은 HashRouter대신에 BrowserRouter 사용하면 되지만 깃허브 페이지에 올릴때 불편하기 때문에 HashRouter을 쓴다.\nfunction App() {\n  return (\n    <HashRouter>\n      <Navigation />\n      {/* 라우터에 있는 모든 라우트는 특정 컴포넌트로 보낼때 어떤한 props들도 같이 보낸다. 그래서 컴포넌트에서 이 props들을 사용할 수 있다. Link의 to 속성은 state를 써서 state data를 이 props에 끼어서 같이 보낼수 있다. */}\n      <Route path=\"/\" exact={true} component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/movie/:id\" component={Detail} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n// <App /> 을 컴포넌트라고 하고 리액트는 컴포넌트로 동작한다. 리액트 형식임. App을 쓰면 그냥 함수임. 이것은 jsx(javascript안에 html)라는 리액트에 특화된 개념임.\n// 컴포넌트란 보시다시피 HTML을 반환하는 함수다.\n// 주의할점\n// 컴포넌트의 이름은 대문자로 시작해야함.\n//  리액트 어플리케이션은 하나의 컴포넌트만을 랜더링 해야 하기때문에 App컴포넌트에 이어서 못씀. 따라서 App 컴포넌트 안에다 써야함. 즉 컴포넌트는 컴포넌를 쓴다. 그리고 컴포넌트를 호출할때 속성들을 마음대로 정의 해서 그 속성들을 컴포넌트의 아규먼트로 넘겨서 컴포넌트 내에서 마음대로 쓸수 있다. 컴포넌트도 어떻게 보면 메소드라서\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// serviceWorker.unregister();\n"],"sourceRoot":""}